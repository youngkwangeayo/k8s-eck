# 하이브리드 검색 (kNN + BM25) 최적화 설정
apiVersion: v1
kind: ConfigMap
metadata:
  name: elasticsearch-hybrid-search-config
  namespace: elastic-system
data:
  elasticsearch.yml: |
    # 기본 클러스터 설정
    cluster.name: elasticsearch-hybrid
    node.name: ${HOSTNAME}
    node.roles: ${NODE_ROLES}
    network.host: 0.0.0.0
    discovery.seed_hosts: elasticsearch-es-transport
    cluster.initial_master_nodes: elasticsearch-es-master-0,elasticsearch-es-master-1,elasticsearch-es-master-2

    # 메모리 최적화
    bootstrap.memory_lock: true
    indices.memory.index_buffer_size: 40%
    indices.fielddata.cache.size: 30%
    indices.queries.cache.size: 25%

    # 하이브리드 검색 최적화
    thread_pool.search.queue_size: 10000
    thread_pool.write.queue_size: 5000
    thread_pool.get.queue_size: 2000
    thread_pool.analyze.queue_size: 2000

    # 벡터 검색 최적화 (HNSW)
    index.knn.algo_param.ef_construction: 256
    index.knn.algo_param.m: 24
    index.knn.space_type: cosinesimil

    # BM25 최적화
    index.similarity.default.type: BM25
    index.similarity.default.k1: 1.2
    index.similarity.default.b: 0.75

    # RRF (Reciprocal Rank Fusion) 최적화
    search.allow_expensive_queries: true
    indices.query.bool.max_clause_count: 10000

    # 세그먼트 병합 최적화 (하이브리드 검색용)
    index.merge.policy.max_merge_at_once: 10
    index.merge.policy.segments_per_tier: 10
    index.merge.policy.max_merged_segment: 10gb

    # I/O 최적화
    indices.store.preload: ["nvd", "dvd", "tim", "doc", "dim"]

    # 압축 및 성능 균형
    index.codec: best_compression
    index.refresh_interval: 3s

    # 검색 성능 최적화
    search.max_buckets: 100000
    search.max_open_scroll_context: 5000

---
# 하이브리드 검색용 인덱스 템플릿
apiVersion: v1
kind: ConfigMap
metadata:
  name: hybrid-search-template
  namespace: elastic-system
data:
  template.json: |
    {
      "index_patterns": ["hybrid-*"],
      "settings": {
        "number_of_shards": 3,
        "number_of_replicas": 1,
        "index": {
          "refresh_interval": "3s",
          "codec": "best_compression",
          "max_result_window": 100000,
          "knn": true,
          "knn.algo_param.ef_construction": 256,
          "knn.algo_param.m": 24,
          "similarity": {
            "bm25_optimized": {
              "type": "BM25",
              "k1": 1.2,
              "b": 0.75
            },
            "bm25_title": {
              "type": "BM25",
              "k1": 1.5,
              "b": 0.3
            }
          }
        }
      },
      "mappings": {
        "properties": {
          "vector": {
            "type": "dense_vector",
            "dims": 1536,
            "index": true,
            "similarity": "cosine"
          },
          "title": {
            "type": "text",
            "analyzer": "standard",
            "similarity": "bm25_title",
            "fields": {
              "keyword": {
                "type": "keyword"
              },
              "ngram": {
                "type": "text",
                "analyzer": "ngram_analyzer"
              }
            }
          },
          "content": {
            "type": "text",
            "analyzer": "content_analyzer",
            "similarity": "bm25_optimized",
            "fields": {
              "keyword": {
                "type": "keyword"
              }
            }
          },
          "summary": {
            "type": "text",
            "analyzer": "standard",
            "similarity": "bm25_optimized"
          },
          "tags": {
            "type": "keyword"
          },
          "category": {
            "type": "keyword"
          },
          "metadata": {
            "type": "object",
            "dynamic": true
          },
          "timestamp": {
            "type": "date"
          },
          "url": {
            "type": "keyword"
          },
          "author": {
            "type": "keyword"
          },
          "language": {
            "type": "keyword"
          },
          "boost_score": {
            "type": "float"
          }
        }
      }
    }

---
# 커스텀 분석기 설정
apiVersion: v1
kind: ConfigMap
metadata:
  name: hybrid-search-analyzers
  namespace: elastic-system
data:
  analyzers.json: |
    {
      "settings": {
        "analysis": {
          "analyzer": {
            "content_analyzer": {
              "type": "custom",
              "tokenizer": "standard",
              "filter": [
                "lowercase",
                "stop",
                "stemmer",
                "synonym_filter"
              ]
            },
            "ngram_analyzer": {
              "type": "custom",
              "tokenizer": "standard",
              "filter": [
                "lowercase",
                "ngram_filter"
              ]
            },
            "search_analyzer": {
              "type": "custom",
              "tokenizer": "standard",
              "filter": [
                "lowercase",
                "stop",
                "stemmer"
              ]
            }
          },
          "filter": {
            "ngram_filter": {
              "type": "ngram",
              "min_gram": 2,
              "max_gram": 3
            },
            "synonym_filter": {
              "type": "synonym",
              "synonyms": [
                "AI,artificial intelligence,machine learning",
                "DB,database,데이터베이스",
                "API,application programming interface"
              ]
            },
            "stemmer": {
              "type": "stemmer",
              "language": "english"
            }
          }
        }
      }
    }